service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  stackName: ${self:service}-${self:provider.stage}
  profile: personalAccount
  environment:
    REGION: ${self:provider.region}
    PRODUCTS_TABLE_NAME: ${self:custom.productsTableName}
    PRODUCTS_SNS_ARN: !Ref CreateProductTopic
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
          Resource:
                - { "Fn::GetAtt": ["ProductsTable", "Arn" ] }
        - Effect: Allow
          Action:
            - sns:*
          Resource: !Ref CreateProductTopic

plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  productsTableName: products-table-${self:provider.stage}
  catalogItemsQueueName: catalog-items-queue-${self:provider.stage}
  autoswagger:
    typefiles: ['./src/types/products.d.ts']
    apiType: 'http'
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  dynamodb:
    stages:
      - dev
    start:
      inMemory: true
      migrate: true
      seed: true
    seed:
      local:
        sources:
          - table: ${self:custom.productsTableName}
            sources: [./offline/products.json]

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: /products
          method: get
          cors: true
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: /products/{productId}
          method: get
          cors: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: /products
          method: post
          cors: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn

resources:
  Resources:
    CreateProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: CreateProductTopic
    CreateProductSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: ${file(./emails.json):productSubscription}
        TopicArn: !Ref CreateProductTopic
    LowInStockProductSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: ${file(./emails.json):lowInStockSubscription}
        TopicArn: !Ref CreateProductTopic
        FilterPolicy: '{"count":[{"numeric":["<",5]}]}'
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.productsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: count
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CountIndex
            KeySchema:
              - AttributeName: count
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.catalogItemsQueueName}
  Outputs:
    productsQueueUrl:
      Value: !Ref CatalogItemsQueue
    productsQueueArn:
      Value: !GetAtt CatalogItemsQueue.Arn


